name: CI (Docker)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    container:
      image: nvidia/cuda:12.9.0-devel-ubuntu22.04
    
    name: CUDA 12.9 Docker - Release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y cmake build-essential libgtest-dev
        
    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
        
    - name: Build
      run: |
        cd build
        make -j$(nproc)
        
    - name: List build artifacts
      run: |
        cd build
        find . -name "*.a" -o -name "*.so" -o -name "*test*" -type f
        
    - name: Check symbols
      run: |
        cd build
        if [ -f lib/libcuda_image_kernels.a ]; then
          echo "=== Checking exported symbols ==="
          nm -C lib/libcuda_image_kernels.a | grep " T " | head -20
        fi

  code-quality:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:22.04
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install tools
      run: |
        apt-get update
        apt-get install -y cppcheck clang-format-16
        
    - name: Run cppcheck
      run: |
        cppcheck --enable=warning,style,performance,portability \
                 --suppress=missingInclude \
                 --error-exitcode=1 \
                 --std=c++17 \
                 --language=c++ \
                 host/ tests/ examples/ 2>&1 | tee cppcheck.log
        
    - name: Check formatting
      run: |
        find . \( -name "*.cpp" -o -name "*.h" -o -name "*.cu" -o -name "*.cuh" \) \
               -not -path "./build/*" \
               -not -path "./venv/*" \
               -exec clang-format-16 --dry-run --Werror {} + || \
               echo "::warning::Code formatting issues found. Run clang-format to fix."