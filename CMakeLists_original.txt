cmake_minimum_required(VERSION 3.18)
project(cuda_kernel_optimizer LANGUAGES CXX CUDA)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set CUDA standard
set(CMAKE_CUDA_STANDARD 17)
set(CMAKE_CUDA_STANDARD_REQUIRED ON)

# Find required packages
find_package(CUDA REQUIRED)
find_package(GTest REQUIRED)

# CUDA architecture settings for SM 89/90 (Ada Lovelace)
set(CMAKE_CUDA_ARCHITECTURES "89;90")

# Compiler flags
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")

# CUDA compiler flags
set(CMAKE_CUDA_FLAGS "-O3 -use_fast_math --ptxas-options=-v")
set(CMAKE_CUDA_FLAGS_DEBUG "-g -G -O0")
set(CMAKE_CUDA_FLAGS_RELEASE "-O3 -use_fast_math --ptxas-options=-v")

# Include directories
include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/host)
include_directories(${CUDA_INCLUDE_DIRS})

# Source files for the static library
set(KERNEL_SOURCES
    kernels/filters.cu
    kernels/fused_ops.cu
    kernels/morphology.cu
)

set(HOST_SOURCES
    host/launchers.cpp
)

# Create static library from CUDA kernels and host code
add_library(cuda_image_kernels STATIC
    ${KERNEL_SOURCES}
    ${HOST_SOURCES}
)

# Set properties for the static library
set_target_properties(cuda_image_kernels PROPERTIES
    CUDA_SEPARABLE_COMPILATION ON
    CUDA_RESOLVE_DEVICE_SYMBOLS ON
    POSITION_INDEPENDENT_CODE ON
)

# Specify target compile options
target_compile_options(cuda_image_kernels PRIVATE
    $<$<COMPILE_LANGUAGE:CUDA>:
        -O3
        -use_fast_math
        -arch=sm_89
        --ptxas-options=-v
        --extended-lambda
        --expt-relaxed-constexpr
    >
    $<$<COMPILE_LANGUAGE:CXX>:
        -O3
        -march=native
        -mtune=native
    >
)

# Link CUDA runtime
target_link_libraries(cuda_image_kernels
    ${CUDA_LIBRARIES}
    ${CUDA_CUDART_LIBRARY}
)

# Test executables
set(TEST_SOURCES
    tests/test_common.h
    tests/test_filters.cpp
    tests/test_fused_ops.cpp
)

# Create test executable for filters
add_executable(test_filters
    tests/test_filters.cpp
)

target_link_libraries(test_filters
    cuda_image_kernels
    GTest::gtest
    GTest::gtest_main
    ${CUDA_LIBRARIES}
)

target_compile_options(test_filters PRIVATE
    $<$<COMPILE_LANGUAGE:CXX>:
        -O2
        -Wall
        -Wextra
    >
)

# Create test executable for fused operations
add_executable(test_fused_ops
    tests/test_fused_ops.cpp
)

target_link_libraries(test_fused_ops
    cuda_image_kernels
    GTest::gtest
    GTest::gtest_main
    ${CUDA_LIBRARIES}
)

target_compile_options(test_fused_ops PRIVATE
    $<$<COMPILE_LANGUAGE:CXX>:
        -O2
        -Wall
        -Wextra
    >
)

# Create test executable for morphological operations
add_executable(test_morphology
    tests/test_morphology.cpp
)

target_link_libraries(test_morphology
    cuda_image_kernels
    GTest::gtest
    GTest::gtest_main
    ${CUDA_LIBRARIES}
)

target_compile_options(test_morphology PRIVATE
    $<$<COMPILE_LANGUAGE:CXX>:
        -O2
        -Wall
        -Wextra
    >
)

# Create comprehensive test executable
add_executable(test_all
    tests/test_filters.cpp
    tests/test_fused_ops.cpp
    tests/test_morphology.cpp
)

target_link_libraries(test_all
    cuda_image_kernels
    GTest::gtest
    GTest::gtest_main
    ${CUDA_LIBRARIES}
)

target_compile_options(test_all PRIVATE
    $<$<COMPILE_LANGUAGE:CXX>:
        -O2
        -Wall
        -Wextra
    >
)

# Benchmark executable
add_executable(benchmark_kernels
    benchmarks/benchmark_main.cpp
)

target_link_libraries(benchmark_kernels
    cuda_image_kernels
    ${CUDA_LIBRARIES}
)

target_compile_options(benchmark_kernels PRIVATE
    $<$<COMPILE_LANGUAGE:CXX>:
        -O3
        -march=native
        -mtune=native
        -DNDEBUG
    >
)

# Example usage executable
add_executable(example_usage
    examples/example_usage.cpp
)

target_link_libraries(example_usage
    cuda_image_kernels
    ${CUDA_LIBRARIES}
)

target_compile_options(example_usage PRIVATE
    $<$<COMPILE_LANGUAGE:CXX>:
        -O2
        -Wall
        -Wextra
    >
)

# Python kernel generator executable
add_executable(python_kernel_generator
    tools/python_kernel_generator.cpp
)

target_link_libraries(python_kernel_generator
    cuda_image_kernels
    ${CUDA_LIBRARIES}
)

target_compile_options(python_kernel_generator PRIVATE
    $<$<COMPILE_LANGUAGE:CXX>:
        -O2
        -Wall
        -Wextra
    >
)

# Installation targets
install(TARGETS cuda_image_kernels
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION bin
)

install(FILES host/launchers.h
    DESTINATION include
)

install(TARGETS test_filters test_fused_ops test_morphology test_all
        benchmark_kernels example_usage python_kernel_generator
    RUNTIME DESTINATION bin
)

# Custom targets for testing
add_custom_target(run_tests
    COMMAND test_filters
    COMMAND test_fused_ops  
    COMMAND test_morphology
    DEPENDS test_filters test_fused_ops test_morphology
    COMMENT "Running all CUDA kernel tests"
)

add_custom_target(run_benchmarks
    COMMAND benchmark_kernels
    DEPENDS benchmark_kernels
    COMMENT "Running performance benchmarks"
)

add_custom_target(run_example
    COMMAND example_usage
    DEPENDS example_usage
    COMMENT "Running example usage demonstration"
)

# Documentation target (requires Doxygen)
find_package(Doxygen)
if(DOXYGEN_FOUND)
    set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxyfile.in)
    set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
    
    configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)
    
    add_custom_target(docs
        COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating API documentation with Doxygen"
        VERBATIM
    )
endif()

# Debug information
message(STATUS "CMAKE_CUDA_ARCHITECTURES: ${CMAKE_CUDA_ARCHITECTURES}")
message(STATUS "CUDA_LIBRARIES: ${CUDA_LIBRARIES}")
message(STATUS "CUDA_INCLUDE_DIRS: ${CUDA_INCLUDE_DIRS}")

# Compiler feature requirements
target_compile_features(cuda_image_kernels PUBLIC cxx_std_17)

# Enable testing
enable_testing()

# Add tests to CTest
add_test(NAME FilterTests COMMAND test_filters)
add_test(NAME FusedOpsTests COMMAND test_fused_ops)
add_test(NAME MorphologyTests COMMAND test_morphology)
add_test(NAME AllTests COMMAND test_all)

# Set test properties
set_tests_properties(FilterTests FusedOpsTests MorphologyTests AllTests
    PROPERTIES
    TIMEOUT 300
    ENVIRONMENT "CUDA_VISIBLE_DEVICES=0"
)

# Performance test (longer timeout)
add_test(NAME BenchmarkTests COMMAND benchmark_kernels --benchmark_min_time=1)
set_tests_properties(BenchmarkTests
    PROPERTIES
    TIMEOUT 600
    ENVIRONMENT "CUDA_VISIBLE_DEVICES=0"
)

# Code coverage (if available)
option(ENABLE_COVERAGE "Enable code coverage" OFF)
if(ENABLE_COVERAGE)
    target_compile_options(cuda_image_kernels PRIVATE
        $<$<COMPILE_LANGUAGE:CXX>:--coverage>
    )
    target_link_libraries(cuda_image_kernels --coverage)
endif()

# Sanitizers (debug builds)
option(ENABLE_SANITIZERS "Enable AddressSanitizer and UBSan" OFF)
if(ENABLE_SANITIZERS AND CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_options(cuda_image_kernels PRIVATE
        $<$<COMPILE_LANGUAGE:CXX>:-fsanitize=address,undefined>
    )
    target_link_libraries(cuda_image_kernels -fsanitize=address,undefined)
endif()

# Print build configuration
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ compiler: ${CMAKE_CXX_COMPILER}")
message(STATUS "CUDA compiler: ${CMAKE_CUDA_COMPILER}")
message(STATUS "CUDA version: ${CUDA_VERSION}")

# Validation warnings
if(CUDA_VERSION VERSION_LESS "12.0")
    message(WARNING "CUDA version ${CUDA_VERSION} detected. This project targets CUDA 12.9+")
endif()

# Check for required compute capability
if(CMAKE_CUDA_ARCHITECTURES)
    foreach(arch ${CMAKE_CUDA_ARCHITECTURES})
        if(arch LESS "89")
            message(WARNING "Compute capability ${arch} is below the target SM 89/90")
        endif()
    endforeach()
endif()

# Export compile commands for IDEs
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Set runtime output directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)